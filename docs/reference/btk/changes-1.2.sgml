<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
]>
<refentry id="btk-changes-1-2" revision="1 Jan 2002">
<refmeta>
<refentrytitle>Changes from 1.0 to 1.2</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>Changes from 1.0 to 1.2</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Changes from 1.0 to 1.2</refname>
<refpurpose>
Incompatible changes made between version 1.0 and version 1.2
</refpurpose>
</refnamediv>


<refsect1>
<title>Incompatible changes from 1.0 to 1.2</title>

<itemizedlist>

<listitem>
<para>
<structname>BtkAcceleratorTable</structname> has been replaced with 
<structname>BtkAccelGroup</structname>.
</para>
</listitem>

<listitem>
<para>
<structname>BtkMenuFactory</structname> has been replaced with 
<structname>BtkItemFactory</structname>, although
a version of <structname>BtkMenuFactory</structname> is currently still 
provided to ease the migration phase.
</para>
</listitem>

<listitem>
<para>
The <structname>BtkTypeInfo</structname> structures used in the 
<function>btk_*_type_init()</function> functions have
changed a bit, the old format:
<programlisting>
      BtkTypeInfo bin_info =
      {
        "BtkBin",
        sizeof (BtkBin),
        sizeof (BtkBinClass),
        (BtkClassInitFunc) btk_bin_class_init,
        (BtkObjectInitFunc) btk_bin_init,
        (BtkArgSetFunc) NULL,
        (BtkArgGetFunc) NULL,
      };
</programlisting>

  needs to be converted to:

<programlisting>
      static const BtkTypeInfo bin_info =
      {
        "BtkBin",
        sizeof (BtkBin),
        sizeof (BtkBinClass),
        (BtkClassInitFunc) btk_bin_class_init,
        (BtkObjectInitFunc) btk_bin_init,
        /* reserved_1 */ NULL,
        /* reserved_2 */ NULL,
        (BtkClassInitFunc) NULL,
      };
</programlisting>

  the <function>BtkArgSetFunc</function> and <function>BtkArgGetFunc</function>
  functions are not supported from the type system anymore, and you should make
  sure that your code only fills in these fields with <literal>NULL</literal> 
  and doesn't use the deprecated function typedefs 
  <literal>(BtkArgSetFunc)</literal> and <literal>(BtkArgGetFunc)</literal> 
  anymore.
</para>
</listitem>

<listitem>
<para>
A number of BTK+ functions were renamed. For compatibility, 
  <filename>btkcompat.h</filename> #define's the old 1.0.x function names in 
  terms of the new names. To assure your BTK+ program doesn't rely on outdated
  function variants, compile your program with 
  <option>-DBTK_DISABLE_COMPAT_H</option> to disable
  the compatibility aliases.

  Here is the list of the old names and replacements:

<informaltable>
<tgroup cols="2">
<thead>
<row><entry>Old</entry><entry>Replacement</entry></row>
</thead>
<tbody>
<row><entry><function>btk_accel_label_accelerator_width</function></entry><entry><function>btk_accel_label_get_accel_width</function></entry></row>
<row><entry><function>btk_check_menu_item_set_state</function></entry><entry><function>btk_check_menu_item_set_active</function></entry></row>
<row><entry><function>btk_container_border_width</function></entry><entry><function>btk_container_set_border_width</function></entry></row>
<row><entry><function>btk_label_set</function></entry><entry><function>btk_label_set_text</function></entry></row>
<row><entry><function>btk_notebook_current_page</function></entry><entry><function>btk_notebook_get_current_page</function></entry></row>
<row><entry><function>btk_packer_configure</function></entry><entry><function>btk_packer_set_child_packing</function></entry></row>
<row><entry><function>btk_paned_gutter_size</function></entry><entry><function>btk_paned_set_gutter_size</function></entry></row>
<row><entry><function>btk_paned_handle_size</function></entry><entry><function>btk_paned_set_handle_size</function></entry></row>
<row><entry><function>btk_scale_value_width</function></entry><entry><function>btk_scale_get_value_width</function></entry></row>
<row><entry><function>btk_style_apply_default_pixmap</function></entry><entry><function>btk_style_apply_default_background</function></entry></row>
<row><entry><function>btk_toggle_button_set_state</function></entry><entry><function>btk_toggle_button_set_active</function></entry></row>
<row><entry><function>btk_window_position</function></entry><entry><function>btk_window_set_position</function></entry></row>
</tbody>
</tgroup>
</informaltable> 
Note that <function>btk_style_apply_default_background()</function> has an 
      additional argument, <literal>set_bg</literal>. This parameter should be 
      <literal>FALSE</literal> if the background is being set for a 
      <literal>NO_WINDOW</literal> widget, otherwise <literal>TRUE</literal>.
</para>
</listitem>

<listitem>
<para>
During the development phase of the 1.1.x line of BTK+ certain functions
  were deprecated and later removed. Functions affected are:

<informaltable>
<tgroup cols="2">
<thead>
<row><entry>Removed</entry><entry>Replacement</entry></row>
</thead>
<tbody>
<row><entry><function>btk_clist_set_border</function></entry><entry><function>btk_clist_set_shadow_type</function></entry></row>
<row><entry><function>btk_container_block_resize</function></entry><entry><function>btk_container_set_resize_mode</function></entry></row>
<row><entry><function>btk_container_unblock_resize</function></entry><entry><function>btk_container_set_resize_mode</function></entry></row>
<row><entry><function>btk_container_need_resize</function></entry><entry><function>btk_container_check_resize</function></entry></row>
<row><entry><function>btk_ctree_show_stub</function></entry><entry><function>btk_ctree_set_show_stub</function></entry></row>
<row><entry><function>btk_ctree_set_reorderable</function></entry><entry><function>btk_clist_set_reorderable</function></entry></row>
<row><entry><function>btk_ctree_set_use_drag_icons</function></entry><entry><function>btk_clist_set_use_drag_icons</function></entry></row>
<row><entry><function>btk_entry_adjust_scroll</function></entry><entry><function>-</function></entry></row>
<row><entry><function>btk_object_class_add_user_signal</function></entry><entry><function>btk_object_class_user_signal_new</function></entry></row>
<row><entry><function>btk_preview_put_row</function></entry><entry><function>btk_preview_put</function></entry></row>
<row><entry><function>btk_progress_bar_construct</function></entry><entry><function>btk_progress_set_adjustment</function></entry></row>
<row><entry><function>btk_scrolled_window_construct</function></entry><entry><function>btk_scrolled_window_set_{h|v}adjustment</function></entry></row>
<row><entry><function>btk_spin_button_construct</function></entry><entry><function>btk_spin_button_configure</function></entry></row>
<row><entry><function>btk_widget_thaw_accelerators</function></entry><entry><function>btk_widget_unlock_accelerators</function></entry></row>
<row><entry><function>btk_widget_freeze_accelerators</function></entry><entry><function>btk_widget_lock_accelerators</function></entry></row>
</tbody>
</tgroup>
</informaltable>

Note that <function>btk_entry_adjust_scroll()</function> is no longer needed 
    as <structname>BtkEntry</structname> should automatically keep the scroll 
    adjusted properly.
</para>
</listitem>


<listitem>
<para>
Additionally, all <function>btk_*_interp()</function> functions were removed.
  <function>btk_*_full()</function> versions were provided as of BTK+ 1.0 and 
  should be used instead.
</para>
</listitem>

<listitem>
<para>
<structname>BtkButton</structname> has been changed to derive from 
<structname>BtkBin</structname>.
  To access a button's child, use <literal>BTK_BIN (button)-&gt;child</literal>,
  instead of the old <literal>BTK_BUTTON (button)-&gt;child</literal>.
</para>
</listitem>

<listitem>
<para>
The selection API has been slightly modified:

 <function>btk_selection_add_handler()</function> and 
 <function>btk_selection_add_handler_full()</function> 
 have been removed. To supply the selection, one now registers
 the targets one is interested in with:

<programlisting>
  void btk_selection_add_target (BtkWidget           *widget, 
	  	                 BdkAtom              selection,
			         BdkAtom              target,
			         buint                info);
</programlisting>

 or:
  
<programlisting>
  void btk_selection_add_targets (BtkWidget           *widget, 
	  			  BdkAtom              selection,
				  BtkTargetEntry      *targets,
				  buint                ntargets);
</programlisting>

 When a request for a selection is received, the new "selection_get"
 signal will be called:

<programlisting>
   void  "selection_get"           (BtkWidget          *widget,
				    BtkSelectionData   *selection_data,
				    buint               info,
				    buint               time);
</programlisting>

 A "time" parameter has also been added to the "selection_received"
 signal.

<programlisting>
  void  "selection_received"       (BtkWidget          *widget,
				    BtkSelectionData   *selection_data,
				    buint               time);
</programlisting>
</para>
</listitem>

<listitem>
<para>
The old drag and drop API has been completely removed and replaced.
  See the reference documentation for details on the new API.
</para>
</listitem>

<listitem>
<para>
Support for Themes has been added. In general, this does
  not affect application code, however, a few new rules should
  be observed:

  <itemizedlist>
  <listitem>
  <para>To set a shape for a window, you must use 
     <function>btk_widget_shape_combine_mask()</function> instead of 
     <function>bdk_window_shape_combine_mask()</function>, or the shape will be
     reset when switching themes.
  </para>
  </listitem>

  <listitem>
  <para>It is no longer permissable to draw directly on an arbitrary
     widget, or to set an arbitrary widget's background pixmap.
     If you need to do that, use a <structname>BtkDrawingArea</structname> or 
     (for a toplevel) a <structname>BtkWindow</structname> where 
     <function>btk_widget_set_app_paintable()</function>
     has been called.
  </para>
  </listitem>
  </itemizedlist>
</para>
</listitem>

<listitem>
<para>
The <structname>BtkScrolledWindow</structname> widget no longer creates a 
  <structname>BtkViewport</structname> automatically. Instead, it has been 
  generalized to accept any "self-scrolling" widget.
</para>

<para>
  The self-scrolling widgets in the BTK+ core are 
  <structname>BtkViewport</structname>,
  <structname>BtkCList</structname>, <structname>BtkCTree</structname>, 
  <structname>BtkText</structname>, and <structname>BtkLayout</structname>. 
  All of these widgets can be added to a scrolled window as normal children with
  <function>btk_container_add()</function> and scrollbars will be set up 
  automatically.
</para>

<para>
  To add scrollbars to a non self-scrolling widget, (such as a 
  <structname>BtkList</structname>),
  first add it to a viewport, then add the viewport to a scrolled window.
  The scrolled window code provides a convenience function to do this:

<programlisting>
  void btk_scrolled_window_add_with_viewport (BtkScrolledWindow *scrollwin,
					      BtkWidget         *child);
</programlisting>

  This does exactly what it says - it creates a viewport, adds the child
  widget to it, then adds the viewport to the scrolled window.
</para>

<para>
  The scrollbars have been removed from the <structname>BtkCList</structname>
  and <structname>BtkCTree</structname>, because they are now scrolled by simply
  adding them to a scrolled window. The scrollbar policy is set on the scrolled
  window with <function>btk_scrolled_window_set_policy()</function> and not on 
  the child widgets (e.g. <structname>BtkCList</structname>'s 
  <function>btk_clist_set_policy()</function> was removed).
</para>
</listitem>  

<listitem>
<para>
The "main loop" of BTK+ has been moved to GLib. This should not
  affect existing programs, since compatibility functions have
  been provided. However, you may want to consider migrating
  your code to use the GLib main loop directly.
</para>
</listitem>

<listitem>
<para>
the <literal>BTK_BASIC</literal> flag was removed, and with it the corresponding
  macro and function <function>BTK_WIDGET_BASIC()</function> and 
  <function>btk_widget_basic()</function>.
</para>
</listitem>
  
<listitem>
<para>
All freeze/thaw methods are now recursive - that is, if you
  freeze a widget n times, you must also thaw it n times.

  Therefore, if you have code like:

<informalexample><programlisting>
  bboolean frozen;
  frozen = BTK_CLIST_FROZEN (clist);
  btk_clist_freeze (clist);
  [...]
  if (!frozen)
    btk_clist_thaw (clist);
</programlisting></informalexample>

  it will not work anymore. It must be, simply:

<informalexample><programlisting>
  btk_clist_freeze (clist);
  [...]
  btk_clist_thaw (clist);
</programlisting></informalexample>
</para>
</listitem>

<listitem>
<para>
The thread safety in BTK+ 1.2 is slightly different than
  that which appeared in early versions in the 1.1
  development track. The main difference is that it relies on 
  the thread primitives in GLib, and on the thread-safe 
  GLib main loop.
</para>

<para>
  This means:

<itemizedlist>
   <listitem>
     <para>You must call <function>g_thread_init()</function> before 
       executing any other BTK+ or BDK functions in a threaded BTK+ program.
     </para>
   </listitem>

   <listitem>
     <para>Idles, timeouts, and input functions are executed outside 
       of the main BTK+ lock. So, if you need to call BTK+ 
       inside of such a callback, you must surround the callback
       with a <function>bdk_threads_enter()</function>/<function>bdk_threads_leave()</function> 
       pair.
     </para>

     <para>However, signals are still executed within the main
       BTK+ lock.
     </para>

     <para>In particular, this means, if you are writing widgets
       that might be used in threaded programs, you <emphasis>must</emphasis>
       surround timeouts and idle functions in this matter.
     </para>
     
     <para>As always, you must also surround any calls to BTK+
       not made within a signal handler with a 
       <function>bdk_threads_enter()</function>/<function>bdk_threads_leave()</function> 
       pair.
     </para>
   </listitem>

   <listitem>
     <para>There is no longer a special <option>--with-threads</option> 
       <command>configure</command> option for BTK+. To use threads in a BTK+ 
       program, you must:

       <orderedlist>
         <listitem>
           <para>If you want to use the native thread implementation,
              make sure GLib found this in configuration, otherwise,
              call you must provide a thread implementation to
	      <function>g_thread_init()</function>.
           </para>
         </listitem>
         <listitem>
           <para>Link with the libraries returned by
             <command>btk-config --libs bthread</command>
             and use the cflags from
             <command>btk-config --cflags bthread</command>.
             You can get these <envar>CFLAGS</envar> and <envar>LIBS</envar> by 
             passing <literal>bthread</literal> as the fourth parameter to the 
             <literal>AM_PATH_BTK</literal> <application>automake</application>
             macro.
           </para>
         </listitem>
       </orderedlist>
     </para>
   </listitem>
  </itemizedlist>
</para>
</listitem>

<listitem>
<para>
Prior to BTK+ 1.2, there were two conflicting interpretations
  of <literal>widget->requisition</literal>. It was either taken to be
  the size that the widget requested, or that size modified by calls to 
  <function>btk_widget_set_usize()</function>. In BTK+ 1.2,
  it is always interpreted the first way.
</para>

<para>
  Container widgets are affected in two ways by this:

  <orderedlist>
    <listitem>
      <para>Container widgets should not pass 
        <literal>widget->requisition</literal> as the second parameter to 
        <function>btk_widget_size_request()</function>.
        Instead they should call it like:
        <programlisting>
          BtkRequisition child_requisition;
          btk_widget_size_request (widget, &amp;child_requisition);
        </programlisting>
      </para>
    </listitem>
    <listitem>
      <para>Container widgets should not access 
        <literal>child->requisition</literal> directly. Either they should use 
        the values returned by <function>btk_widget_size_request()</function>, 
        or they should call the new function:
        <programlisting>
    void btk_widget_get_child_requisition (BtkWidget      *widget,
					   BtkRequisition *requisition);
        </programlisting>
        which returns the requisition of the given widget, modified
        by calls to <function>btk_widget_set_usize()</function>.
      </para>
    </listitem>
  </orderedlist>
</para>
</listitem>


</itemizedlist>

</refsect1>

</refentry>

