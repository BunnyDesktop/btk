<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
]>
<chapter id="btk-migrating-BtkComboBox">

  <title>Migrating from BtkOptionMenu and BtkCombo to BtkComboBox and 
         BtkComboBoxEntry</title>

  <para>
    Prior to 2.4, BTK+ offered two widgets for the task of selecting one
    item from a list of options. #BtkOptionMenu presents the list of 
    options as a menu while #BtkCombo presents them in a Windows-style list 
    popup. The only difference between the two is that a #BtkCombo allows to 
    manually edit the selected value, while the #BtkOptionMenu does not.
  </para> 
  <para>
    In BTK+ 2.4, a unified API for list selection was introduced, with 
    #BtkComboBox for the non-editable case and #BtkComboBoxEntry for the 
    editable case. 
    The selection of the display style &mdash; menu or list &mdash;
    is no longer done at the API level, but has been made themeable via
    the style property #BtkComboBox:appears-as-list.
  </para>

  <section id="migrating-BtkOptionMenu">
    <title>Migrating from BtkOptionMenu to BtkComboBox</title>
    
    <para>
      Here is an example of a simple, but typical use of 
      #BtkOptionMenu<!---->:
      <informalexample><programlisting>
BtkWidget *option_menu, *menu, *menu_item;

option_menu = btk_option_menu_new (<!-- -->);      
menu = btk_menu_new (<!-- -->);

menu_item = btk_menu_item_new_with_label ("First Item");
btk_menu_shell_append (BTK_MENU_SHELL (menu), menu_item);
btk_widget_show (menu_item);
menu_item = btk_menu_item_new_with_label ("Second Item");
btk_menu_shell_append (BTK_MENU_SHELL (menu), menu_item);
btk_widget_show (menu_item);
menu_item = btk_menu_item_new_with_label ("Third Item");
btk_menu_shell_append (BTK_MENU_SHELL (menu), menu_item);
btk_widget_show (menu_item);

btk_option_menu_set_menu (BTK_OPTION_MENU (option_menu), menu);
      </programlisting></informalexample>
      In order to react to the user's selection, connect to the #BtkOptionMenu::changed
      signal on the option menu and use btk_option_menu_get_history()
      to retrieve the index of the selected item.
    </para>
    <para>
      And here is how it would be done with a #BtkComboBox<!---->:
      <informalexample><programlisting>
BtkWidget *combo_box;

combo_box = btk_combo_box_text_new (<!-- -->);

btk_combo_box_text_append (BTK_COMBO_BOX_TEXT (combo_box), "First Item");
btk_combo_box_text_append (BTK_COMBO_BOX_TEXT (combo_box), "Second Item");
btk_combo_box_text_append (BTK_COMBO_BOX_TEXT (combo_box), "Third Item");
      </programlisting></informalexample>
      In order to react to the user's selection, connect to the 
      #BtkComboBox::changed signal and use btk_combo_box_get_active()
      to retrieve the index of the selected item.
    </para>

    <para>
      A slightly more complex example involving images:
      <informalexample><programlisting>
BtkWidget *option_menu, *menu, *menu_item;

option_menu = btk_option_menu_new (<!-- -->);      
menu = btk_menu_new (<!-- -->);

menu_item = btk_image_menu_item_new_with_label ("First Item");
btk_image_menu_item_set_image (btk_image_new_from_pixbuf (pixbuf1));
btk_menu_shell_append (BTK_MENU_SHELL (menu), menu_item);
btk_widget_show (menu_item);
menu_item = btk_image_menu_item_new_with_label ("Second Item");
btk_image_menu_item_set_image (btk_image_new_from_pixbuf (pixbuf2));
btk_menu_shell_append (BTK_MENU_SHELL (menu), menu_item);
btk_widget_show (menu_item);
menu_item = btk_image_menu_item_new_with_label ("Third Item");
btk_image_menu_item_set_image (btk_image_new_from_pixbuf (pixbuf3));
btk_menu_shell_append (BTK_MENU_SHELL (menu), menu_item);
btk_widget_show (menu_item);

btk_option_menu_set_menu (BTK_OPTION_MENU (option_menu), menu);
      </programlisting></informalexample>
    </para>
    <para>
      can be done using a #BtkComboBox as follows:
      <informalexample><programlisting>
BtkListStore *store;
BtkTreeIter iter;
BtkCellRenderer *renderer;
BtkWidget *combo_box;

store = btk_list_store_new (2, BDK_TYPE_PIXBUF, G_TYPE_STRING);

btk_list_store_append (store, &amp;iter);
btk_list_store_set (store, &amp;iter, 0, pixbuf1, 1, "First Item", -1);
btk_list_store_append (store, &amp;iter);
btk_list_store_set (store, &amp;iter, 0, pixbuf2, 1, "Second Item", -1);
btk_list_store_append (store, &amp;iter);
btk_list_store_set (store, &amp;iter, 0, pixbuf3, 1, "Third Item", -1);

combo_box = btk_combo_box_new_with_model (BTK_TREE_MODEL (store));

renderer = btk_cell_renderer_pixbuf_new (<!-- -->);
btk_cell_layout_pack_start (BTK_CELL_LAYOUT (combo_box), renderer, FALSE);
btk_cell_layout_set_attributes (BTK_CELL_LAYOUT (combo_box), renderer,
                                "pixbuf", 0,
                                NULL);

renderer = btk_cell_renderer_text_new (<!-- -->);
btk_cell_layout_pack_start (BTK_CELL_LAYOUT (combo_box), renderer, TRUE);
btk_cell_layout_set_attributes (BTK_CELL_LAYOUT (combo_box), renderer,
                                "text", 1,
                                NULL);
      </programlisting></informalexample>
    </para>
  </section>

  <section id="migrating-BtkCombo">
    <title>Migrating from BtkCombo to BtkComboBoxEntry</title>

    <para>
      Here is an example of a simple, but typical use of a #BtkCombo<!---->:
      <informalexample><programlisting>
BtkWidget *combo;
GList *items = NULL;

items = g_list_append (items, "First Item");
items = g_list_append (items, "Second Item");
items = g_list_append (items, "Third Item");

combo = btk_combo_new (<!-- -->);
btk_combo_set_popdown_strings (BTK_COMBO (combo), items);
      </programlisting></informalexample>
      In order to react to the user's selection, connect to the #BtkCombo::changed
      signal on the combo and use 
      <literal>btk_entry_get_text (BTK_ENTRY (combo->entry))</literal>
      to retrieve the selected text.
    </para>
    <para>
      And here is how it would be done using #BtkComboBoxEntry<!---->:
      <informalexample><programlisting>
combo_box = btk_combo_box_text_new_with_entry (<!-- -->);

btk_combo_box_text_append (BTK_COMBO_BOX_TEXT (combo_box), "First Item");
btk_combo_box_text_append (BTK_COMBO_BOX_TEXT (combo_box), "Second Item");
btk_combo_box_text_append (BTK_COMBO_BOX_TEXT (combo_box), "Third Item");
      </programlisting></informalexample>
      In order to react to the user's selection, connect to the #BtkComboBox::changed
      signal on the combo and use 
      <literal>btk_entry_get_text (BTK_ENTRY (BTK_BIN (combo_box)->child))</literal>
      to retrieve the selected text.
    </para>
  </section>

  <section id="new-features-BtkComboBox">
    <title>New features</title>

    <para>
      The new widgets have more to offer than a mere combination of the
      features of #BtkOptionMenu and #BtkCombo. Notable new features 
      include:
      <variablelist>
        <varlistentry>
          <term>Grid mode</term>
          <listitem><para>Sometimes it is preferable to display the available
            options not in a linear list, but in a grid. A typical example 
            would be a "color combo" where the individual items are small 
	    square color swatches. The new widgets support gridded display 
            with the functions 
            btk_combo_box_set_wrap_width(), 
            btk_combo_box_set_row_span_column() and 
            btk_combo_box_set_column_span_column().
          </para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Display of icons</term>
          <listitem><para>An often-heard complaint about #BtkOptionMenu is that 
          the icons which appear in the image menu items in its menu are not
	  displayed in the button showing the selected item. This limitation
          has been removed in #BtkComboBox; the selected item appears in the 
          same way as the options in the popup.
          </para></listitem>
        </varlistentry>
        <varlistentry>
          <term>Full tree model power</term>
          <listitem><para>
            Since the new widgets are built around the same models that are
            used for #BtkTreeView, all of the powerful machinery of tree models 
            and cell renderers can be used.
          </para></listitem>
        </varlistentry>
      </variablelist>
    </para>
  </section>

</chapter>

<!--
Local variables:
mode: sgml
sgml-parent-document: ("btk-docs.sgml" "book" "part" "chapter")
End:
-->
