<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
]>
<refentry id="btk-compiling" revision="4 Feb 2001">
<refmeta>
<refentrytitle>Compiling BTK+ Applications</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Compiling BTK+ Applications</refname>
<refpurpose>
How to compile your BTK+ application
</refpurpose>
</refnamediv>

<refsect1>
<title>Compiling BTK+ Applications on UNIX</title>

<para>
To compile a BTK+ application, you need to tell the compiler where to 
find the BTK+ header files and libraries. This is done with the
<literal>pkg-config</literal> utility.
</para>
<para>
The following interactive shell session demonstrates how
<literal>pkg-config</literal> is used (the actual output on 
your system may be different):
<programlisting>
$ pkg-config --cflags btk+-2.0
 -I/usr/include/btk-2.0 -I/usr/lib/btk-2.0/include -I/usr/include/bunnylib-2.0 -I/usr/lib/bunnylib-2.0/include -I/usr/include/bango-1.0 -I/usr/X11R6/include -I/usr/include/freetype2 -I/usr/include/batk-1.0  
$ pkg-config --libs btk+-2.0
 -L/usr/lib -L/usr/X11R6/lib -lbtk-x11-2.0 -lbdk-x11-2.0 -lXi -lbdk_pixbuf-2.0 -lm -lbangox -lbangoxft -lXft -lXrender -lXext -lX11 -lfreetype -lbango -lbatk -lbobject-2.0 -lbmodule-2.0 -ldl -lbunnylib-2.0  
</programlisting>
</para>
<para>
The simplest way to compile a program is to use the "backticks"
feature of the shell. If you enclose a command in backticks
(<emphasis>not single quotes</emphasis>), then its output will be
substituted into the command line before execution. So to compile 
a BTK+ Hello, World, you would type the following:
<programlisting>
$ cc `pkg-config --cflags --libs btk+-2.0` hello.c -o hello
</programlisting>
</para>

<para>
If you want to make sure that your program doesn't use any deprecated 
functions, you can define the preprocessor symbol BTK_DISABLE_DEPRECATED
by using the command line option <literal>-DBTK_DISABLE_DEPRECATED=1</literal>.
There are similar symbols BDK_DISABLE_DEPRECATED, 
BDK_PIXBUF_DISABLE_DEPRECATED and G_DISABLE_DEPRECATED for BDK, BdkPixbuf and
GLib. 
</para>

<para>
If you want to make sure that your program doesn't use any functions which 
may be problematic in a multihead setting, you can define the preprocessor
symbol BDK_MULTIHEAD_SAFE by using the command line option 
<literal>-DBTK_MULTIHEAD_SAFE=1</literal>.
</para>

<para>
The recommended way of using BTK+ has always been to only include the
toplevel headers <filename>btk.h</filename>, <filename>bdk.h</filename>, 
<filename>bdk-pixbuf.h</filename>.
If you want to make sure that your program follows this recommended
practise, you can define the preprocessor symbols BTK_DISABLE_SINGLE_INCLUDES
and BDK_PIXBUF_DISABLE_SINGLE_INCLUDES to make BTK+ generate an error
when individual headers are directly included.
There are some exceptions: <filename>bdkkeysyms.h</filename> is not included in
<filename>bdk.h</filename> because the file is quite large; see
<link linkend="bdk-Keyboard-Handling">Key Values documentation</link>.
<filename>bdkx.h</filename> must be included independently because It's
platform-specific; see
<link linkend="bdk-X-Window-System-Interaction">X Window System Interaction</link>
documentation.
The same for <filename>btkunixprint.h</filename> if you use the non-portable
<link linkend="BtkPrintUnixDialog">BtkPrintUnixDialog</link> API.
</para>

<para>
The next major version, BTK+ 3,  will remove many implementation details and
struct members from its public headers. To ensure that your application will
not have problems with this, you can define the preprocessor symbol
GSEAL_ENABLE. This will make the compiler catch all uses of direct access to
struct fields so that you can go through them one by one and replace them with
a call to an accessor function instead.
</para>

</refsect1>
</refentry>
