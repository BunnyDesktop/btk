Overview:
========

This file describes the way that autogeneration
works within the BTK+ source code.

The following files in the bdk/ subdirectory
are autogenerated:

  bdkkeysyms.h
  bdkcursors.h 

The following files in the btk/ subdirectory 
are autogenerated:

 btk.defs
   Description of BTK+ types (and some functions) in a lisp-style
   format.
 btktypebuiltins.h
   Header file including declarations for internal types  
 btktypebuiltins_vars.c
   Variables for type values for internal types.
 btktypebuiltins_ids.c
   Arrays holding information about each internal type.
 btktypebuiltins_evals.c
   Arrays holding mapping between enumeration values
   and strings.

 btkmarshal.c
 btkmarshal.h
   Autogenerated signal marshallers

BDK
===

bdkkeysyms.h and bdkcursors.h are generated from
the corresponding header files

  X11/cursorfont.h
  X11/keysymdef.h

by some simple sed scripts. These are not actually
run automatically because we want all the keysyms
even on systems with a limited set.
So the Bdk rule to generate both files (X-derived-headers)
only needs to be rerun for every new release of the X Window
System.

BTK+ - type definitions
=======================

The type definitions are generated from several sources:

 btk-boxed.defs - definitions for boxed types
 BTK+ header files
 BDK header files

The makeenums.pl script does a heuristic parse of 
the header files and extracts all enumerations declarations.
It also recognizes a number of pseudo-comments in the
header files:

Two of these apply to individual enumeration values:

  /*< skip >*/

 This enumeration value should be skipped.
  
  /*< nick=NICK >*/

 The nickname for this value should NICK instead of the
 normally guessed value. For instance:

  typedef enum {
    BTK_TARGET_SAME_APP = 1 << 0,    /*< nick=same-app >*/
    BTK_TARGET_SAME_WIDGET = 1 << 1  /*< nick=same-widget >*/
  } BtkTargetFlags;

 makes the nicks "same-app" and "same-widget", instead of
 "app" and "widget" that would normally be used.

The other two apply to entire enumeration declarations.
 
  /*< prefix=PREFIX >*/

  Specifies the prefix to be removed from the enumeration
  values to generate nicknames.

  /*< flags >*/

 Specifies that this enumeration is used as a bitfield.
 (makenums.pl normally guesses this from the presence of values
  with << operators). For instance:

  typedef enum                    /*< flags >*/
  {
    BDK_IM_PREEDIT_AREA      = 0x0001, 
    BDK_IM_PREEDIT_CALLBACKS = 0x0002, 
    [ ... ]
 } BdkIMStyle;

makeenums.pl can be run into two modes:

 1) Generate the btktypebuiltins_eval.c file (this
    contains arrays holding the mapping of 
    string <=> enumeration value)

 2) Generate the enumeration portion of btk.defs.

The enumeration portion is added to the boxed type 
declarations in btk-boxed.defs to create btk.defs.

The makeetypes.awk program takes the btk.defs file, and
from that generates various files depending on the
third parameter passed to it:

 macros: btktypebuiltins.h
 variables: btktypebuiltins_vars.c
 entries: btktypebuiltins_ids.c

BTK+ - marshallers
==================

The files btkmarshal.c and btkmarshal.h include declarations
and definitions for the marshallers needed inside of
BTK+. The marshallers to be generated are listed in
the file btkmashal.list, which is processed
by genmarshal.pl.

The format of this file is a list of lines:

  <retval-type>:<arg1-type>,<arg2-type>,<arg3-type>
 
e.g.:

  BOOL:POINTER,STRING,STRING,POINTER

A marshaller is generated for each line in the file.
The possible types are:

 NONE
 BOOL
 CHAR
 INT
 UINT
 LONG
 ULONG
 FLOAT
 DOUBLE
 STRING
 ENUM
 FLAGS
 BOXED
 POINTER
 OBJECT
 FOREIGN    (bpointer data, BtkDestroyNotify notify)
 C_CALLBACK (BtkFunction func, bpointer func_data)
 SIGNAL     (BtkSignalFunc f, bpointer data)
 ARGS       (bint n_args, BtkArg *args)
 CALLBACK   (BtkCallBackMarshal marshall,
             bpointer data,
	     BtkDestroyNotify Notify)

Some of these types map to multiple return values - these
are marked above with the return types in parentheses.

NOTES
=====

When autogenerating BTK+ files, the autogenerated
files are often rebuild resulting in the same result.

To prevent unnecessary rebuilds of the entire directory, some files
that multiple other source files depend on are not actually written
to directly.  Instead, an intermediate file is written, which
is then compared to the old file, and only if it is different
is it copied into the final location.
