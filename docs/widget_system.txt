Notes about the inner workings of the widget system of BTK+
===========================================================

This file contains some notes as to how the widget system does
and should work. It consists of three parts:

 I) A description of the meaning of the various flags

 II) A list of invariants about the states of the widgets. 
    (Throughout this document, we refer to the states of the
     widgets by referring to the flags for BtkWidget)

 III) Some notes about the ways that a widget changes states

 IV) A list of responsibilities of various widget signals when
    the states change.

Any action necessary to maintain the invariants in II which is not
explicitly mentioned in IV), is the responsibility of the core BTK
code, which is roughly defined as:

  btkobject.c
  btkwidget.c
  btkcontainer.c
  btkmain.c
  btksignal.c

Section II is mostly of interest to those maintaining BTK, the
other sections may also be interesting to people writing
new widgets.

Main outline:
	- Owen Taylor <owt1@cornell.edu>
	  1998/02/03

Flag descriptions:
	- Tim Janik <timj@gimp.org>
	  1998/02/04

I. Flags
--------

BtkObject:

BTK_DESTROYED:
	This flagged is set for a BtkObject right before its
	destruction code is executed. Its main use is the
	prevention of multiple destruction invocations.
	
BTK_FLOATING:
	This flag reflects the fact that the holder of the
	initial reference count is unknown. Refer to refcounting.txt
	for further details.

BTK_RESERVED_1:
BTK_RESERVED_2:
	Reserved flags.


BtkWidget, public flags:

BTK_TOPLEVEL:
	Widgets without a real parent, as there are BtkWindows and
	BtkMenus have this flag set throughout their lifetime.
	Toplevel widgets always contain their own BdkWindow.
	
BTK_NO_WINDOW:
	This flag is indicative for a widget that does not provide
	its own BdkWindow. Visible action (e.g. drawing) is performed
	on the parent's BdkWindow.

BTK_REALIZED:
	Set by btk_widget_realize, unset by btk_widget_unrealize.
	Relies on ((widget->parent && widget->parent->window)
	           || BTK_WIDGET_TOPLEVEL (widget));
	Means: widget has an associated BdkWindow (XWindow).

BTK_MAPPED:
	Set by btk_widget_map, unset by btk_widget_unmap.
	May only be set if BTK_WIDGET_REALIZED (widget).
	Means: bdk_window_show() has been called on the widgets window(s).

BTK_VISIBLE:
	Set by btk_widget_show.
	Implies that a widget will be flagged BTK_MAPPED as soon as its
	parent is mapped.
!BTK_VISIBLE:
	Set by btk_widget_hide.
	Implies that a widget is not onscreen, therefore !BTK_MAPPED.

BTK_CHILD_VISIBLE
        Set by btk_widget_set_child_visible, and if FALSE indicates that 
        the widget should not be mapped even if the parent is mapped
        and visible. Containers like BtkNotebook use this flag.
        A private flag, not a public flag, so if you need to check
        this flag, you should call btk_widget_get_child_visible().
        (Should be very rarely necessary.)

BTK_SENSITIVE:
	Set and unset by btk_widget_set_sensitive.
	The sensitivity of a widget determines whether it will receive
	certain events (e.g. button or key presses). One premise for
	the widgets sensitivity is to have BTK_SENSITIVE set.

BTK_PARENT_SENSITIVE:
	Set and unset by btk_widget_set_sensitive operations on the
	parents of the widget.
	This is the second premise for the widgets sensitivity. Once
	it has BTK_SENSITIVE and BTK_PARENT_SENSITIVE set, its state is
	effectively sensitive. This is expressed (and can be examined) by
	the BTK_WIDGET_IS_SENSITIVE macro.

BTK_CAN_FOCUS:
	There are no directly corresponding functions for setting/unsetting
	this flag, but it can be affected by the BtkWidget::has_focus argument
	via btk_widget_set_arg.
	This flag determines whether a widget is able to handle focus grabs.

BTK_HAS_FOCUS:
	This flag will be set by btk_widget_grab_focus for widgets that also
	have BTK_CAN_FOCUS set. The flag will be unset once another widget
	grabs the focus.
	
BTK_CAN_DEFAULT:
BTK_HAS_DEFAULT:
	These two flags are mostly equal in functionality to their *_FOCUS
	counterparts, but for the default widget.

BTK_HAS_GRAB:
	Set by btk_grab_add, unset by btk_grab_remove.
	Means: widget is in the grab_widgets stack, and will be the preferred
	one for receiving events other than ones of cosmetic value.

BTK_BASIC:
	The BTK_BASIC flag is an attempt at making a distinction
	between widgets that handle user input e.g. key/button presses
	and those that don't. Subsequent parent<->child relation ships
	of non `basic' widgets should be avoided. The checking for
	this is currently not properly enforced in the code. For
	example BtkButton is a non `basic' widget, that will therefore
	disallow to act as a container for another BtkButton. Now the
	gnit is, one can add a BtkHBox (which is a `basic' widget) to
	the first button, and put the second into the box.

BTK_RESERVED_3:

BTK_RC_STYLE:
	This flag indicates that its style has been looked up through
	the rc mechanism. It does not imply that the widget actually
	had a style defined through the rc mechanism.


BtkWidget, private flags:

BTK_USER_STYLE:
	A widget is flagged to have a user style, once btk_widget_set_style
	has been invoked for it. The use of this flag is to tell widgets
	which share a global user style from the ones which got a certain
	style assign from outside the toolkit.
	
BTK_RESIZE_PENDING:
	First, this is only valid for BtkContainers.
	[some of the code should move to btkcontainer.c therefore]
	Relies on BTK_WIDGET_REALIZED(widget)
	[this is not really enforced throughout the code, but should
	 be. it only requires a few checks for BTK_WIDGET_REALIZED and
	 minor changes to btk_widget_unrealize, we can then remove the check
	 in btk_widget_real_destroy]
	Means: there is an idle handler waiting for the container to
	resize it.

BTK_RESIZE_NEEDED:
	Relies on BTK_WIDGET_REALIZED(widget)
	[this is not really enforced throughout the code, but should
	 be. once this is done special checking in btk_widget_real_destroy
	 can be avoided]
	Means: a widget has been added to the resize_widgets list of
	its _toplevel_ container (keep this in mind for BtkViewport).
	Remark: this flag is also used internally by btkwindow.c during
	the evaluation of resizing worthy widgets.

BTK_LEAVE_PENDING:
	A widget is flagged as such if there is a leave_notify event
	pending for it. It will receive this event regardless of a grab
	through another widget or its current sensitivity.
	[this should be made relying on BTK_REALIZED]

BTK_HAS_SHAPE_MASK:
	Set by btk_widget_shape_combine_mask if a widget got a shape mask
	assigned (making use of the X11 shaped window extension).

BTK_IN_REPARENT:
	During the act of reparentation widgets which are already
	realized and will be added to an already realized parent need
	to have this flag set to prevent natural unrealization on the
	process of getting unparented.

BTK_NEED_REQUEST:
	This flag is set if the widget doesn't have an up to date 
	requisition. If this flag is set, we must actually emit ::size-request
        when btk_widget_size_request() is called. Otherwise, we can
        simply widget->requisition. We keep track of this all the time
        however, widgets with this flag set are only added to the resize 
	queue if they are viewable.

BTK_NEED_ALLOCATION:
	This flag is set if the widget doesn't have an up to date 
	allocation. If this flag is set, we must actually emit ::size-allocate
        when btk_widget_size_allocate() is called, even if the new allocation
        is the same as the current allocation.
 
Related Macros:

BTK_WIDGET_DRAWABLE:
	This macro examines whether a widget is flagged as BTK_WIDGET_VISIBLE
	and BTK_WIDGET_MAPPED.
	Means: it _makes sense_ to draw in a widgets window.

BTK_WIDGET_IS_SENSITIVE:
	This macro tells the real sensitivity state of a widget. It returns
	whether both the widget and all its parents are in sensitive state.


II. Invariants:
---------------

This section describes various constraints on the states of 
the widget:

In the following

  A => B     means  if A is true, than B is true
  A <=> B    means  A is true, if and only if B is true
                    (equivalent to A => B and A <= B)


1)  BTK_WIDGET_DESTROYED (widget) => !BTK_WIDGET_REALIZED (widget)
                                  => !BTK_WIDGET_VISIBLE (widget)
[ The latter is not currently in place, but it should be ] 
 
2) BTK_WIDGET_MAPPED (widget) => BTK_WIDGET_REALIZED (widget)

3) if BTK_WIDGET_TOPLEVEL (widget):
   BTK_WIDGET_VISIBLE (widget) <=> BTK_WIDGET_MAPPED (widget)

4) if !BTK_WIDGET_TOPLEVEL (widget):
  widget->parent && BTK_WIDGET_REALIZED (widget->parent) <=>
     BTK_WIDGET_REALIZED (widget)

5) if !BTK_WIDGET_TOPLEVEL (widget):

   BTK_WIDGET_MAPPED (widget) => BTK_WIDGET_VISIBLE (widget)
                              => BTK_WIDGET_CHILD_VISIBLE (widget)
                              => BTK_WIDGET_REALIZED (widget)

   widget->parent && BTK_WIDGET_MAPPED (widget->parent) && 
     BTK_WIDGET_VISIBLE (widget) && BTK_WIDGET_CHILD_VISIBLE 
       => BTK_WIDGET_MAPPED (widget)

Note:, the definition

[  BTK_WIDGET_DRAWABLE = BTK_WIDGET_VISIBLE && BTK_WIDGET_MAPPED
   is made in btkwidget.h, but by 3) and 5), 
     
      BTK_WIDGET_MAPPED => BTK_WIDGET_VISIBLE
]

6) BTK_REDRAW_PENDING => BTK_WIDGET_REALIZED
   BTK_RESIZE_PENDING =>         "
   BTK_LEAVE_PENDING  =>         "
   BTK_RESIZE_NEEDED  =>         "

III. How states are changed:
----------------------------

How can the user control the state of a widget:
-----------------------------------------------

(In the following, set flag means set the flag, do appropriate
actions, and enforce above invariants) 

btk_widget_show: 
 if !BTK_DESTROYED sets BTK_VISIBLE

btk_widget_hide:
 if !BTK_VISIBLE for widget

btk_widget_destroy:
 sets BTK_DESTROYED
 For a top-level widget

btk_widget_realize:
 if !BTK_DESTROYED sets BTK_REALIZED
- Calling btk_widget_realize when the widget is not a descendant
  of a toplevel is an ERROR.

btk_container_add (container, widget) [ and container-specific variants ]
 Sets widget->parent 

btk_container_remove (container, widget)
 unsets widget->parent

btk_widget_reparent (widget, new_parent)
 Equivalent to removing widget from old parent and adding it to
 the new parent, except that the widget will not be temporarily 
 unrealized if both the old parent and the new parent are realized.


btk_widget_unrealize
btk_widget_map
btk_widget_unmap

These functions are not meant to be used by applications - they
are used only by BTK and widgets to enforce invariants on the
state.

When The X window corresponding to a BTK window is destroyed:
-------------------------------------------------------------

btk_widget_destroy is called (as above).



IV. Responsibilities of widgets
--------------------------------

Adding to a container
---------------------

When a widget is added to a container, the container:

  1) calls btk_widget_set_parent_window (widget, window) if 
     the widget is being added to something other than container->window
  2) calls btk_widget_set_parent (widget, container)

Removing from a container
-------------------------

When a widget is removed to a container, the container:

  1) Calls btk_widget_unparent (widget)
  2) Queues a resize.

Notes:

 btk_widget_unparent unrealizes the widget except in the 
   special case BTK_IN_REPARENT is set.


At widget creation
------------------

Widgets are created in an unrealized state. 

 1) The widget should allocate and initialize needed data structures


The Realize signal
------------------

When a widget receives the "realize" signal it should:

 NO_WINDOW widgets: (probably OK to use default handler)

  1) set the realized flag
  2) set widget->window
      widget->window = btk_widget_get_parent_window (widget);
      g_object_ref (widget->window);
  3) attach the widget's style

  widget->style = btk_style_attach (widget->style, widget->window);

 widget with window(s)

  1) set the REALIZED flag
  2) create windows with the parent obtained from
      btk_widget_get_parent_window (widget);
  3) attach the widget's style
  4) set the background color for the new window based on the style

The Map signal
--------------

  1) Set the MAPPED flag
  2) If the widget has any windows, bdk_window_show those windows
  3) call btk_widget_map for all child widgets that are 
     VISIBLE, CHILD_VISIBLE and !MAPPED. (A widget will only
     be !CHILD_VISIBLE if the container set it that way, so
     most containers will not have to check this.)
  3) Do any other functions related to putting the widget onscreen.
     (for instance, showing extra popup windows...)

The Unmap signal
----------------

When a widget receives the unmap signal, it must:

 1) If the widget has a window, bdk_window_hide that window, 
 2) If the widget does not have a window, unmap all child widgets
 3) Do any other functions related to taking the widget offscreen
     (for instance, removing popup windows...)
 4) Unset BTK_MAPPED


The Unrealize signal
--------------------

When a widget receives the unrealize signal, it must

 1) For any windows other than widget->window do:

    bdk_window_set_user_data (window, NULL);
    bdk_window_destroy (window);

 2) Call the parent's unrealize handler


The Widget class unrealize handler will take care of unrealizing
all children if necessary. [should this be made consistent with
unmap???]


The Destroy Signal
------------------

Commentary:

  The destroy signal probably shouldn't exist at all. A widget
  should merely be unrealized and removed from its parent
  when the user calls btk_widget_destroy or a BDK_DESTROY event
  is received. However, a large body of code depends on
  getting a definitive signal when a widget goes away.

  That could be put in the finalization step, but, especially
  with language bindings, the cleanup step may need to refer
  back to the widget. (To use btk_widget_get_data, for instance)
  If it does so via a pointer in a closure (natural for
  Scheme, or Perl), then the finalization procedure will never
  be called. 

  Also, if we made that the finalization step, we would have
  to propagate the BDK_DESTROY event in any case, since it is
  at that point at which user-visible actions need to be taken.


When a widget receives the destroy signal, it must:

  1) If the widget "owns" any widgets other than its child
     widgets, (for instance popup windows) it should
     call btk_widget_destroy () for them.

  2) Call the parent class's destroy handler.


The "destroy" signal will only be received once. A widget
will never receive any other signals after the destroy
signal (but see the section on "Finalize" below)

The widget must handle calls to all publically accessible
functions in an innocuous manner even after a "destroy"
signal. (A widget can assume that it will not be realized 
after a "destroy" signal is received, which may simplify
handling this requirement)


The Finalize Pseudo-signal
--------------------------

The finalize pseudo-signal is received after all references
to the widget have been removed. The finalize callback
cannot make any BTK calls with the widget as a parameter.

1) Free any memory allocated by the widget. (But _not_
   the widget structure itself.

2) Call the parent class's finalize signal


A note on chaining "destroy" signals and finalize signals:
---------------------------------------------------------

This is done by code like:

  if (BTK_OBJECT_CLASS (parent_class)->destroy)
    (* BTK_OBJECT_CLASS (parent_class)->destroy) (object);

It may not be completely obvious why this works. Note
that parent_class is a static variable on a per-class
basis. So say: we have

  BtkFoo <- BtkBar <- BtkWidget <-BtkObject

And that Foo, Widget, and Object all have destructors, but
not Bar.

Then btk_foo_destroy will call btk_widget_destroy (because
it was not overridden in the Bar class structure) and
btk_widget_destroy will call btk_object_destroy because
the parent_class variable referenced by btk_foo_destroy is the 
static variable in btkwidget.c: BtkObjectClass.
