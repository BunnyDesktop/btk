README for BDK-DirectFB
------------------------

This is the BDK backend that allows BTK to work on top of DirectFB.

Important:
The current code does not pass through directfb passed on the btk
apps command line on to directfb you need to set the environment variable
DFBARGS.
Example:
export DFBARGS=system=sdl

DirectFB is a hardware abstraction layer on top of the Linux
frame buffer that provides drawing functions, a window stack and
support for input devices. The code you find here is a backend for
BDK, the drawing kit used by BTK+.


As DirectFB provides drawing functions, a windowing stack and manages
input devices, this is a lightweight BDK port. Some parts of BDK
require higher level drawing functions that are supported by 
bairo on DirectFB. 
BDK also uses some feature like bitmaps that do not map well to 
modern graphics hardware and are for that reason not yet supported in 
this snapshot. See the file TODO for a list of missing features.


If you want BTK+ to draw window decorations for you, edit the file
btk/btkwindow-decorate.c and uncomment the line that says
#define DECORATE_WINDOWS.


BTK+ application compiled with this version of BTK+ understand some
additional command-line options special to the DirectFB BDK backend:

  --transparent-unfocused  Makes unfocused windows translucent.

  --argb-font              Use ARGB surfaces for fonts, needed for some
                           broken hardware.

  --glyph-surface-cache    Lets you tune the size of the glyph cache, 
                           the default is to cache glyphs from 8 faces.

  --enable-color-keying    This option turns on a hack that does the
                           following:

    (1) It overrides the color used to draw the window background to
        bdk_directfb_bg_color as defined in bdkprivate-directfb.h.
        Note that the alpha value only takes effect if the window has
        an alpha channel.
    (2) It also draws all rectangles that are drawn in
        bdk_directfb_bg_color_key in this color (bdk_directfb_bg_color).

    This feature can be used to create windows with translucent background.

Additionally all DirectFB command-line options as described in the
directfbrc man-page are supported.


This version of BTK+ also introduces two new functions that are special
to the DirectFB version. You need to include bdk/bdkdirectfb.h to be
able to use them.

  bdk_directfb_window_set_opacity (BdkWindow *window, buchar opacity));

      This function sets the overall opacity for toplevel BDK windows.

  bdk_directfb_visual_by_format (DFBSurfacePixelFormat pixel_format);

      This function returns a BdkVisual for a DirectFB pixelformat and
      thus gives you control over the window surface. If for example
      you want to create a window with alpha channel you can use some
      code like the following:

        visual = bdk_directfb_visual_by_format (DSPF_ARGB);
        cmap = bdk_colormap_new (visual, FALSE);
        btk_widget_push_colormap (cmap);
        window = btk_window_new (BTK_WINDOW_TOPLEVEL);
        btk_widget_pop_colormap ();
        g_object_unref (cmap);

Don't use these functions if you want to be able to compile your
application against BTK+-X11 or other BTK+ versions.


If you are developing a BTK+ application for BTK+-DirectFB make sure
you use the btk+-directfb-2.0.pc file when calling pkg-config to get
the  correct compiler and linker flags for BTK+-DirectFB:

  pkg-config --cflags btk+-directfb-2.0
  pkg-config --libs btk+-directfb-2.0


See the file TODO for a list of unimplemented features.


Detailed and up-to-date instructions on how to build a complete
set of BTK-DFB libraries is avalable in the WIKI of the DirectFB project
at the address
http://www.directfb.org/wiki/index.php/Projects:BTK_on_DirectFB


This library is free software; you can redistribute it and/or modify it 
under the terms of the GNU Lesser General Public License as published 
by the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version.
