/* BTK - The GIMP Toolkit
 * Copyright (C) 1995-1997 Peter Mattis, Spencer Kimball and Josh MacDonald
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/*
 * Modified by the BTK+ Team and others 1997-2000.  See the AUTHORS
 * file for a list of people on the BTK+ Team.  See the ChangeLog
 * files for a list of changes.  These files are distributed with
 * BTK+ at ftp://ftp.btk.org/pub/btk/.
 */

#ifndef __BTK_TYPE_UTILS_H__
#define __BTK_TYPE_UTILS_H__

#if defined(BTK_DISABLE_SINGLE_INCLUDES) && !defined (__BTK_H_INSIDE__) && !defined (BTK_COMPILATION)
#error "Only <btk/btk.h> can be included directly."
#endif

/* enum types generated by bunnylib-mkenums
 */
#include <btk/btktypebuiltins.h>

B_BEGIN_DECLS

/* urg */
#define BTK_TYPE_IDENTIFIER (btk_identifier_get_type ())
GType btk_identifier_get_type (void) B_GNUC_CONST;

/* --- typedefs --- */
/* here we come with some necessary forward declarations for structures and
 * provide some fundamental function signatures
 */
typedef struct _BtkArg	       	     BtkArg;
typedef struct _BtkObject   	     BtkObject; /* object forward declaration */
#if !defined (BTK_DISABLE_DEPRECATED) || defined (BTK_COMPILATION)
typedef bboolean (*BtkFunction)	    (bpointer      data);
typedef void (*BtkCallbackMarshal)  (BtkObject    *object,
				     bpointer      data,
				     buint         n_args,
				     BtkArg       *args);
#endif

/* This used to be defined in btkitemfactory.h, but moved over here after
 * the complete deprecation of that header
 */
typedef bchar * (*BtkTranslateFunc) (const bchar  *path,
				     bpointer      func_data);


/* Everything below is deprecated and superseded by GType API
 */

#ifndef BTK_DISABLE_DEPRECATED

/* Fundamental Types
 * many of these are just aliases for GLib types to maintain
 * compatibility
 */

#define BTK_TYPE_INVALID B_TYPE_INVALID
#define BTK_TYPE_NONE    B_TYPE_NONE
#define BTK_TYPE_ENUM    B_TYPE_ENUM
#define BTK_TYPE_FLAGS   B_TYPE_FLAGS

/* BtkArg types */
#define BTK_TYPE_CHAR    B_TYPE_CHAR
#define BTK_TYPE_UCHAR   B_TYPE_UCHAR
#define BTK_TYPE_BOOL    B_TYPE_BOOLEAN
#define BTK_TYPE_INT     B_TYPE_INT
#define BTK_TYPE_UINT    B_TYPE_UINT
#define BTK_TYPE_LONG    B_TYPE_LONG
#define BTK_TYPE_ULONG   B_TYPE_ULONG
#define BTK_TYPE_FLOAT   B_TYPE_FLOAT
#define BTK_TYPE_DOUBLE  B_TYPE_DOUBLE
#define BTK_TYPE_STRING  B_TYPE_STRING
#define BTK_TYPE_BOXED   B_TYPE_BOXED
#define BTK_TYPE_POINTER B_TYPE_POINTER

typedef GType BtkFundamentalType;

/* --- type macros --- */
#define BTK_CLASS_NAME(class)		(g_type_name (B_TYPE_FROM_CLASS (class)))
#define BTK_CLASS_TYPE(class)		(B_TYPE_FROM_CLASS (class))
#define BTK_TYPE_IS_OBJECT(type)	(g_type_is_a ((type), BTK_TYPE_OBJECT))

/* outdated macros that really shouldn't e used anymore,
 * use the GLib type system instead
 */
#define	BTK_TYPE_FUNDAMENTAL_LAST        (B_TYPE_LAST_RESERVED_FUNDAMENTAL - 1)
#define	BTK_TYPE_FUNDAMENTAL_MAX         (B_TYPE_FUNDAMENTAL_MAX)

#define	BTK_FUNDAMENTAL_TYPE	B_TYPE_FUNDAMENTAL
#define BTK_STRUCT_OFFSET	G_STRUCT_OFFSET

/* bunnylib macro wrappers (compatibility) */
#define	BTK_CHECK_CAST		B_TYPE_CHECK_INSTANCE_CAST
#define	BTK_CHECK_CLASS_CAST	B_TYPE_CHECK_CLASS_CAST
#define BTK_CHECK_GET_CLASS	B_TYPE_INSTANCE_GET_CLASS
#define	BTK_CHECK_TYPE		B_TYPE_CHECK_INSTANCE_TYPE
#define	BTK_CHECK_CLASS_TYPE	B_TYPE_CHECK_CLASS_TYPE

/* bunnylib type wrappers (compatibility) */

typedef GType                   BtkType;
typedef GTypeInstance           BtkTypeObject;
typedef GTypeClass              BtkTypeClass;
typedef GBaseInitFunc           BtkClassInitFunc;
typedef GInstanceInitFunc       BtkObjectInitFunc;
typedef GSignalCMarshaller      BtkSignalMarshaller;

typedef void (*BtkDestroyNotify)    (bpointer data);
typedef void (*BtkSignalFunc)       (void);

#define BTK_SIGNAL_FUNC(f)	    G_CALLBACK(f)

#endif /* BTK_DISABLE_DEPRECATED */

#if !defined (BTK_DISABLE_DEPRECATED) || defined (BTK_COMPILATION)

/* Used by btk_container_foreach_unmarshal () */

/* BtkArg, used to hold differently typed values */
struct _BtkArg
{
  GType type;
  bchar *name;

  /* this union only defines the required storage types for
   * the possibile values, thus there is no bint enum_data field,
   * because that would just be a mere alias for bint int_data.
   * use the BTK_VALUE_*() and BTK_RETLOC_*() macros to access
   * the discrete memebers.
   */
  union {
    /* flat values */
    bchar char_data;
    buchar uchar_data;
    bboolean bool_data;
    bint int_data;
    buint uint_data;
    blong long_data;
    bulong ulong_data;
    bfloat float_data;
    bdouble double_data;
    bchar *string_data;
    BtkObject *object_data;
    bpointer pointer_data;

    /* structured values */
    struct {
      GCallback f;
      bpointer d;
    } signal_data;
  } d;
};

/* argument value access macros, these must not contain casts,
 * to allow the usage of these macros in combination with the
 * address operator, e.g. &BTK_VALUE_CHAR (*arg)
 */
#define BTK_VALUE_CHAR(a)	((a).d.char_data)
#define BTK_VALUE_UCHAR(a)	((a).d.uchar_data)
#define BTK_VALUE_BOOL(a)	((a).d.bool_data)
#define BTK_VALUE_INT(a)	((a).d.int_data)
#define BTK_VALUE_UINT(a)	((a).d.uint_data)
#define BTK_VALUE_LONG(a)	((a).d.long_data)
#define BTK_VALUE_ULONG(a)	((a).d.ulong_data)
#define BTK_VALUE_FLOAT(a)	((a).d.float_data)
#define BTK_VALUE_DOUBLE(a)	((a).d.double_data)
#define BTK_VALUE_STRING(a)	((a).d.string_data)
#define BTK_VALUE_ENUM(a)	((a).d.int_data)
#define BTK_VALUE_FLAGS(a)	((a).d.uint_data)
#define BTK_VALUE_BOXED(a)	((a).d.pointer_data)
#define BTK_VALUE_OBJECT(a)	((a).d.object_data)
#define BTK_VALUE_POINTER(a)	((a).d.pointer_data)
#define BTK_VALUE_SIGNAL(a)	((a).d.signal_data)

#endif /* !BTK_DISABLE_DEPRECATED || BTK_COMPILATION */

#ifndef BTK_DISABLE_DEPRECATED

/* return location macros, these all narrow down to
 * pointer types, because return values need to be
 * passed by reference
 */
#define BTK_RETLOC_CHAR(a)	((bchar*)	(a).d.pointer_data)
#define BTK_RETLOC_UCHAR(a)	((buchar*)	(a).d.pointer_data)
#define BTK_RETLOC_BOOL(a)	((bboolean*)	(a).d.pointer_data)
#define BTK_RETLOC_INT(a)	((bint*)	(a).d.pointer_data)
#define BTK_RETLOC_UINT(a)	((buint*)	(a).d.pointer_data)
#define BTK_RETLOC_LONG(a)	((blong*)	(a).d.pointer_data)
#define BTK_RETLOC_ULONG(a)	((bulong*)	(a).d.pointer_data)
#define BTK_RETLOC_FLOAT(a)	((bfloat*)	(a).d.pointer_data)
#define BTK_RETLOC_DOUBLE(a)	((bdouble*)	(a).d.pointer_data)
#define BTK_RETLOC_STRING(a)	((bchar**)	(a).d.pointer_data)
#define BTK_RETLOC_ENUM(a)	((bint*)	(a).d.pointer_data)
#define BTK_RETLOC_FLAGS(a)	((buint*)	(a).d.pointer_data)
#define BTK_RETLOC_BOXED(a)	((bpointer*)	(a).d.pointer_data)
#define BTK_RETLOC_OBJECT(a)	((BtkObject**)	(a).d.pointer_data)
#define BTK_RETLOC_POINTER(a)	((bpointer*)	(a).d.pointer_data)
/* BTK_RETLOC_SIGNAL() - no such thing */

/* type registration, it is recommended to use
 * g_type_register_static() or
 * g_type_register_dynamic() instead
 */
typedef struct _BtkTypeInfo BtkTypeInfo;

struct _BtkTypeInfo
{
  bchar			*type_name;
  buint			 object_size;
  buint			 class_size;
  BtkClassInitFunc	 class_init_func;
  BtkObjectInitFunc	 object_init_func;
  bpointer		 reserved_1;
  bpointer		 reserved_2;
  BtkClassInitFunc	 base_class_init_func;
};

void            btk_type_init   (GTypeDebugFlags    debug_flags);
BtkType         btk_type_unique (BtkType            parent_type,
                                 const BtkTypeInfo *btkinfo);
bpointer        btk_type_class  (BtkType            type);
bpointer        btk_type_new    (BtkType            type);

/* --- compatibility defines --- */
#define	btk_type_name(type)		 g_type_name (type)
#define	btk_type_from_name(name)	 g_type_from_name (name)
#define	btk_type_parent(type)		 g_type_parent (type)
#define	btk_type_is_a(type, is_a_type)	 g_type_is_a ((type), (is_a_type))

/* enum/flags compatibility functions, we strongly
 * recommend to use the bunnylib enum/flags classes directly
 */
typedef GEnumValue  BtkEnumValue;
typedef GFlagsValue BtkFlagValue;
BtkEnumValue*	btk_type_enum_get_values	(BtkType	 enum_type);
BtkFlagValue*	btk_type_flags_get_values	(BtkType	 flags_type);
BtkEnumValue*	btk_type_enum_find_value	(BtkType	 enum_type,
						 const bchar	*value_name);
BtkFlagValue*	btk_type_flags_find_value	(BtkType	 flags_type,
						 const bchar	*value_name);

#endif /* BTK_DISABLE_DEPRECATED */

B_END_DECLS

#endif /* __BTK_TYPE_UTILS_H__ */
